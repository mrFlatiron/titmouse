#!/usr/bin/perl
use strict;
use warnings;
use utf8;

BEGIN {
  my $path = __FILE__;
  $path =~ s{/[^/]+$}{};
  push @INC, $path;
}

use Getopt::Long;
use File::Path qw( mkpath );
use ContentSub;



sub createFile {
  my ($file_path, $content, $force) = @_;
  my ($file_dir) = $file_path =~ /^(.*)\/[^\/]+$/;
  if ($force) {
    mkpath ($file_dir, 0, 0775);
  }
  open (my $fh, ">", $file_path) or die $!;
  print $fh $content;
  chmod 0664, $file_path;
}

sub createDir {
  my ($dir_name) = @_;
  mkdir $dir_name, 0775;
}

sub createRootDir {
  my ($dir_name) = @_;
  if (-d $dir_name) {
    die $dir_name . "already exists";
  }
  mkpath ($dir_name, 0, 0775); 
}

sub appendLibs_in {
  my ($conf_dir, $new_lib) = @_;
  open(my $fh, "<" , $conf_dir . "libs.in") or die $!;
  my $content = '';
  my $str;
  while ($str = <$fh>) {
    $content .= $str;
  }
  close $fh;
  $content =~ s/\nLIB_DIRS/LIBS += $new_lib\n\nLIB_DIRS/sg;
  open ($fh, ">", $conf_dir . "libs.in") or die $!;
  print $fh $content;
  close $fh;
}

my $mode = 'n';
my $root_dir = '';
my $new_lib = '';

GetOptions (
  "project=s"   => \$root_dir,
  "lib=s"    => \$new_lib)
  or die("Error in command line arguments\n");

if (not $root_dir and not $new_lib) {
  die "at least one of --project and --lib must be specified\n";
}

$mode = ($new_lib) ? 'al' : 'n';

if ($mode eq 'n') {
  die "--project must be specified in 'n' mode\n" unless $root_dir;
}

if ($mode eq 'al') {
  $root_dir = './' unless $root_dir;
}


if (not $root_dir =~ m{^/} and not $root_dir =~ m{^\.}) {
  $root_dir = './' . $root_dir;
}

$root_dir .= '/';


my $bin_dir = $root_dir . "bin/";
my $build_dir = $root_dir . "build/";
my $src_dir = $root_dir . "src/";
my $conf_dir = $root_dir . "config/";
my $tests_dir = $src_dir . "tests/";
my $lib_dir = $src_dir . "lib/";


if ($mode eq 'n') {

  createRootDir($root_dir);


  createDir($bin_dir);
  createDir($build_dir);
  createDir($src_dir);
  createDir($conf_dir);
  createDir($tests_dir);
  createDir($lib_dir);

  createFile($root_dir . "Makefile", ContentSub::Makefile);
  createFile($conf_dir . "common.in", ContentSub::common_in);
  createFile($conf_dir . "libs.in", ContentSub::libs_in);

  createFile($tests_dir . "main.cpp", ContentSub::main_cpp);
  createFile($tests_dir . "files.in", "HEADERS +=\nSOURCES += main.cpp");
}

if ($mode eq 'al') {
  die "Empty lib name\n" unless $new_lib;

  my $path_lib = $lib_dir . $new_lib . '/';

  createDir($path_lib);
  createFile($path_lib . "files.in", "HEADERS +=\nSOURCES +=\n", 1);
  createFile($path_lib . "Makefile", ContentSub::MakefileLib(), 0);
  appendLibs_in ($conf_dir, $new_lib);
}


